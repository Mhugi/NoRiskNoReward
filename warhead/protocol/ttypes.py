#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Direction(object):
  """
  A direction *
  """
  UP = 1
  RIGHT = 2
  DOWN = 3
  LEFT = 4

  _VALUES_TO_NAMES = {
    1: "UP",
    2: "RIGHT",
    3: "DOWN",
    4: "LEFT",
  }

  _NAMES_TO_VALUES = {
    "UP": 1,
    "RIGHT": 2,
    "DOWN": 3,
    "LEFT": 4,
  }

class Team(object):
  """
  A team
  """
  RED = 1
  BLUE = 2

  _VALUES_TO_NAMES = {
    1: "RED",
    2: "BLUE",
  }

  _NAMES_TO_VALUES = {
    "RED": 1,
    "BLUE": 2,
  }

class Terrain(object):
  """
  A type of square *
  """
  NORMAL = 1
  OBSTACLE = 2
  DEF_ADV = 3
  ATT_ADV = 4

  _VALUES_TO_NAMES = {
    1: "NORMAL",
    2: "OBSTACLE",
    3: "DEF_ADV",
    4: "ATT_ADV",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 1,
    "OBSTACLE": 2,
    "DEF_ADV": 3,
    "ATT_ADV": 4,
  }


class Cell(object):
  """
  A single square on the board

  Attributes:
   - team: The current team that occupies the square (could be <code>null</code> if unoccupied)
   - armySize: Number of units the occupying team has in the square
   - x: Square's X coordinate
   - y: Square's Y coordinate
   - terrain: Terrain type in square
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'team', None, None, ), # 1
    (2, TType.I32, 'armySize', None, None, ), # 2
    (3, TType.I32, 'x', None, None, ), # 3
    (4, TType.I32, 'y', None, None, ), # 4
    (5, TType.I32, 'terrain', None, None, ), # 5
  )

  def __init__(self, team=None, armySize=None, x=None, y=None, terrain=None,):
    self.team = team
    self.armySize = armySize
    self.x = x
    self.y = y
    self.terrain = terrain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.team = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.armySize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.terrain = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cell')
    if self.team is not None:
      oprot.writeFieldBegin('team', TType.I32, 1)
      oprot.writeI32(self.team)
      oprot.writeFieldEnd()
    if self.armySize is not None:
      oprot.writeFieldBegin('armySize', TType.I32, 2)
      oprot.writeI32(self.armySize)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 3)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 4)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.terrain is not None:
      oprot.writeFieldBegin('terrain', TType.I32, 5)
      oprot.writeI32(self.terrain)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.armySize is None:
      raise TProtocol.TProtocolException(message='Required field armySize is unset!')
    if self.x is None:
      raise TProtocol.TProtocolException(message='Required field x is unset!')
    if self.y is None:
      raise TProtocol.TProtocolException(message='Required field y is unset!')
    if self.terrain is None:
      raise TProtocol.TProtocolException(message='Required field terrain is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.team)
    value = (value * 31) ^ hash(self.armySize)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.terrain)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Reinforcement(object):
  """
  An instruction to reinforce a square

  Attributes:
   - x: X coordinate of square to reinforce
   - y: Y coordinate of square to reinforce
   - armySize: Number of units to drop in square
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, None, ), # 1
    (2, TType.I32, 'y', None, None, ), # 2
    (3, TType.I32, 'armySize', None, None, ), # 3
  )

  def __init__(self, x=None, y=None, armySize=None,):
    self.x = x
    self.y = y
    self.armySize = armySize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.armySize = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reinforcement')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.armySize is not None:
      oprot.writeFieldBegin('armySize', TType.I32, 3)
      oprot.writeI32(self.armySize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.x is None:
      raise TProtocol.TProtocolException(message='Required field x is unset!')
    if self.y is None:
      raise TProtocol.TProtocolException(message='Required field y is unset!')
    if self.armySize is None:
      raise TProtocol.TProtocolException(message='Required field armySize is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.armySize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Action(object):
  """
  An instruction to move units from one square to an adjacent one

  Attributes:
   - x: X coordinate of square to move from
   - y: Y coordinate of square to move from
   - armySize: Number of units to move
   - direction: Direction to move units to
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, None, ), # 1
    (2, TType.I32, 'y', None, None, ), # 2
    (3, TType.I32, 'armySize', None, None, ), # 3
    (4, TType.I32, 'direction', None, None, ), # 4
  )

  def __init__(self, x=None, y=None, armySize=None, direction=None,):
    self.x = x
    self.y = y
    self.armySize = armySize
    self.direction = direction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.armySize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.direction = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Action')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.armySize is not None:
      oprot.writeFieldBegin('armySize', TType.I32, 3)
      oprot.writeI32(self.armySize)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 4)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.x is None:
      raise TProtocol.TProtocolException(message='Required field x is unset!')
    if self.y is None:
      raise TProtocol.TProtocolException(message='Required field y is unset!')
    if self.armySize is None:
      raise TProtocol.TProtocolException(message='Required field armySize is unset!')
    if self.direction is None:
      raise TProtocol.TProtocolException(message='Required field direction is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.armySize)
    value = (value * 31) ^ hash(self.direction)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Move(object):
  """
  A bot's reply to a game turn

  Attributes:
   - reinforcements: List of reinforcement instructions
   - actions: List of move instructions
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'reinforcements', (TType.STRUCT,(Reinforcement, Reinforcement.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'actions', (TType.STRUCT,(Action, Action.thrift_spec)), None, ), # 2
  )

  def __init__(self, reinforcements=None, actions=None,):
    self.reinforcements = reinforcements
    self.actions = actions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.reinforcements = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Reinforcement()
            _elem5.read(iprot)
            self.reinforcements.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.actions = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = Action()
            _elem11.read(iprot)
            self.actions.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Move')
    if self.reinforcements is not None:
      oprot.writeFieldBegin('reinforcements', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.reinforcements))
      for iter12 in self.reinforcements:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.actions is not None:
      oprot.writeFieldBegin('actions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.actions))
      for iter13 in self.actions:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.reinforcements is None:
      raise TProtocol.TProtocolException(message='Required field reinforcements is unset!')
    if self.actions is None:
      raise TProtocol.TProtocolException(message='Required field actions is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reinforcements)
    value = (value * 31) ^ hash(self.actions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
