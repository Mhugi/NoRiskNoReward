#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def start(self, gameId, team):
    """
    Parameters:
     - gameId
     - team
    """
    pass

  def move(self, gameId, turnNum, reinforcementCount, board):
    """
    Parameters:
     - gameId
     - turnNum
     - reinforcementCount
     - board
    """
    pass

  def result(self, gameId, board):
    """
    Parameters:
     - gameId
     - board
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def start(self, gameId, team):
    """
    Parameters:
     - gameId
     - team
    """
    self.send_start(gameId, team)
    self.recv_start()

  def send_start(self, gameId, team):
    self._oprot.writeMessageBegin('start', TMessageType.CALL, self._seqid)
    args = start_args()
    args.gameId = gameId
    args.team = team
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_start(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = start_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def move(self, gameId, turnNum, reinforcementCount, board):
    """
    Parameters:
     - gameId
     - turnNum
     - reinforcementCount
     - board
    """
    self.send_move(gameId, turnNum, reinforcementCount, board)
    return self.recv_move()

  def send_move(self, gameId, turnNum, reinforcementCount, board):
    self._oprot.writeMessageBegin('move', TMessageType.CALL, self._seqid)
    args = move_args()
    args.gameId = gameId
    args.turnNum = turnNum
    args.reinforcementCount = reinforcementCount
    args.board = board
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_move(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = move_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "move failed: unknown result")

  def result(self, gameId, board):
    """
    Parameters:
     - gameId
     - board
    """
    self.send_result(gameId, board)
    self.recv_result()

  def send_result(self, gameId, board):
    self._oprot.writeMessageBegin('result', TMessageType.CALL, self._seqid)
    args = result_args()
    args.gameId = gameId
    args.board = board
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_result(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = result_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["start"] = Processor.process_start
    self._processMap["move"] = Processor.process_move
    self._processMap["result"] = Processor.process_result

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_start(self, seqid, iprot, oprot):
    args = start_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = start_result()
    try:
      self._handler.start(args.gameId, args.team)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("start", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_move(self, seqid, iprot, oprot):
    args = move_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = move_result()
    try:
      result.success = self._handler.move(args.gameId, args.turnNum, args.reinforcementCount, args.board)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("move", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_result(self, seqid, iprot, oprot):
    args = result_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = result_result()
    try:
      self._handler.result(args.gameId, args.board)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("result", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class start_args(object):
  """
  Attributes:
   - gameId
   - team
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'gameId', None, None, ), # 1
    (2, TType.I32, 'team', None, None, ), # 2
  )

  def __init__(self, gameId=None, team=None,):
    self.gameId = gameId
    self.team = team

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.gameId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.team = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_args')
    if self.gameId is not None:
      oprot.writeFieldBegin('gameId', TType.I32, 1)
      oprot.writeI32(self.gameId)
      oprot.writeFieldEnd()
    if self.team is not None:
      oprot.writeFieldBegin('team', TType.I32, 2)
      oprot.writeI32(self.team)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameId is None:
      raise TProtocol.TProtocolException(message='Required field gameId is unset!')
    if self.team is None:
      raise TProtocol.TProtocolException(message='Required field team is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gameId)
    value = (value * 31) ^ hash(self.team)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class start_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class move_args(object):
  """
  Attributes:
   - gameId
   - turnNum
   - reinforcementCount
   - board
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'gameId', None, None, ), # 1
    (2, TType.I32, 'turnNum', None, None, ), # 2
    (3, TType.I32, 'reinforcementCount', None, None, ), # 3
    (4, TType.LIST, 'board', (TType.LIST,(TType.STRUCT,(Cell, Cell.thrift_spec))), None, ), # 4
  )

  def __init__(self, gameId=None, turnNum=None, reinforcementCount=None, board=None,):
    self.gameId = gameId
    self.turnNum = turnNum
    self.reinforcementCount = reinforcementCount
    self.board = board

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.gameId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.turnNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.reinforcementCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.board = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = []
            (_etype23, _size20) = iprot.readListBegin()
            for _i24 in xrange(_size20):
              _elem25 = Cell()
              _elem25.read(iprot)
              _elem19.append(_elem25)
            iprot.readListEnd()
            self.board.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('move_args')
    if self.gameId is not None:
      oprot.writeFieldBegin('gameId', TType.I32, 1)
      oprot.writeI32(self.gameId)
      oprot.writeFieldEnd()
    if self.turnNum is not None:
      oprot.writeFieldBegin('turnNum', TType.I32, 2)
      oprot.writeI32(self.turnNum)
      oprot.writeFieldEnd()
    if self.reinforcementCount is not None:
      oprot.writeFieldBegin('reinforcementCount', TType.I32, 3)
      oprot.writeI32(self.reinforcementCount)
      oprot.writeFieldEnd()
    if self.board is not None:
      oprot.writeFieldBegin('board', TType.LIST, 4)
      oprot.writeListBegin(TType.LIST, len(self.board))
      for iter26 in self.board:
        oprot.writeListBegin(TType.STRUCT, len(iter26))
        for iter27 in iter26:
          iter27.write(oprot)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameId is None:
      raise TProtocol.TProtocolException(message='Required field gameId is unset!')
    if self.turnNum is None:
      raise TProtocol.TProtocolException(message='Required field turnNum is unset!')
    if self.reinforcementCount is None:
      raise TProtocol.TProtocolException(message='Required field reinforcementCount is unset!')
    if self.board is None:
      raise TProtocol.TProtocolException(message='Required field board is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gameId)
    value = (value * 31) ^ hash(self.turnNum)
    value = (value * 31) ^ hash(self.reinforcementCount)
    value = (value * 31) ^ hash(self.board)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class move_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Move, Move.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Move()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('move_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class result_args(object):
  """
  Attributes:
   - gameId
   - board
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'gameId', None, None, ), # 1
    (2, TType.LIST, 'board', (TType.LIST,(TType.STRUCT,(Cell, Cell.thrift_spec))), None, ), # 2
  )

  def __init__(self, gameId=None, board=None,):
    self.gameId = gameId
    self.board = board

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.gameId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.board = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = []
            (_etype37, _size34) = iprot.readListBegin()
            for _i38 in xrange(_size34):
              _elem39 = Cell()
              _elem39.read(iprot)
              _elem33.append(_elem39)
            iprot.readListEnd()
            self.board.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('result_args')
    if self.gameId is not None:
      oprot.writeFieldBegin('gameId', TType.I32, 1)
      oprot.writeI32(self.gameId)
      oprot.writeFieldEnd()
    if self.board is not None:
      oprot.writeFieldBegin('board', TType.LIST, 2)
      oprot.writeListBegin(TType.LIST, len(self.board))
      for iter40 in self.board:
        oprot.writeListBegin(TType.STRUCT, len(iter40))
        for iter41 in iter40:
          iter41.write(oprot)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameId is None:
      raise TProtocol.TProtocolException(message='Required field gameId is unset!')
    if self.board is None:
      raise TProtocol.TProtocolException(message='Required field board is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gameId)
    value = (value * 31) ^ hash(self.board)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class result_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('result_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
